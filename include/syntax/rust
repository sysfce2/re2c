if_then_else =
    "if " cond " {" nl
    [stmt: indent stmt nl]
    (else? "} else " (cond? "if " cond " ") "{" nl
    [stmt: indent stmt nl])
    "}" nl;

local_var_defn =
    (init? "" : "#[allow(unused_assignments)]" nl)
    "let mut " name " : " type " = " (init? init : "0") nl;
global_var_defn = "const " name ": " type " = " val nl;
//array_defn = ??;
type_int = "isize";
type_uint = "usize";
type_yyctype = ctype;
//type_yybm = ??;

switch =
    "match " expr " {" nl
        [case: indent case]
    "}" nl;

switch_cases =
    [case{0:-2}: case " |" nl]
    case{-1} " => {" nl
        [stmt: indent stmt nl]
    "}" nl;

switch_case_single = val;

switch_case_range = val{0} " ..= " val{-1};

switch_default = "_";

loop =
    (label? label ": ") "loop {" nl
    [stmt: indent stmt nl]
    "}" nl;

enum = [elem: "const " elem ": " (storable_state? "isize" : "usize") " = " val nl] ;

codegen_model = loop_switch;
codegen_model_goto_label = 0;
codegen_model_loop_switch = 1;
label_indent = default;
semicolons = 0;
line_directives = ;
numeric_literals_hex = 1;
implicit_zero_to_bool_conversion = 0;
abort_in_default_case = 1;
single_quote_in_labels = 1;
skeleton = 0;
computed_goto = 0;
case_ranges = 1;
uppercase_constants = 1;
loop_label = 1;

api = generic;
api_style = free-form;

fn_yypeek_expr = (unsafe? "unsafe { " expr " }" : expr) "()";
ff_yypeek_expr = (unsafe? "unsafe { " expr " }" : expr);

abort_expr = "panic!(\"internal lexer error\")";

autogen_comment = "/* Generated by re2c" (version? " " version) (date? " on " date) " */";
