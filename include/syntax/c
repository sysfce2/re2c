local_var_defn = type " " name (init? " = " init) ";" nl;

global_var_defn = "#define " name " " val nl;

array_defn = "static const " type " " name "[] = {" init "};" nl;

type_int = "int";

type_uint = "unsigned int";

type_yyctype = ctype;

type_yybm = "unsigned char";

if_then_else =
    "if (" then_cond ") {" nl
        [then_stmt: indent then_stmt nl]
    (else_part? "} else " (else_cond? "if (" else_cond ") ") "{" nl
        [else_stmt: indent else_stmt nl])
    "}" nl;

if_then_else_oneline =
    "if (" then_cond ") " then_stmt
    (else_part? " else " (else_cond? "(" else_cond ") ") else_stmt)
    nl;

switch =
    "switch (" expr ") {" nl
        [case: indent case]
    "}" nl;

switch_cases =
    [case: case nl]
    [stmt: indent stmt nl];

switch_cases_oneline =
    [case{0:-2}: case nl]
    case{-1} stmt nl;

switch_case_single =
    "case " val ":";

switch_case_range =
    "case " val{0} ".." val{-1} ":";

switch_default =
    "default:";

loop =
    "for (;;) {" nl
        [stmt: indent stmt nl]
    "}" nl;

enum =
    "enum " name " {" nl
        [elem{0:-2}: indent elem (loop_switch? " = " val) "," nl]
        indent elem{-1} (loop_switch? " = " val) nl
    "};" nl;

codegen_model = goto_label;
codegen_model_goto_label = 1;
codegen_model_loop_switch = 1;

label_indent = default;
semicolons = 1;
line_directives = "#line " line " \"" file "\"" nl;
numeric_literals_hex = (ebcdic ? 1 : 0);
implicit_zero_to_bool_conversion = 1;
abort_in_default_case = 0;
single_quote_in_labels = 0;
skeleton = 1;
computed_goto = 1;
case_ranges = 1;
uppercase_constants = 0;
loop_label = 0;

api = c;
api_style = functions;

c_yypeek_expr = "*" expr;
fn_yypeek_expr = expr "()";
ff_yypeek_expr = expr;

abort_expr = "abort()";

autogen_comment = "/* Generated by re2c" (version? " " version) (date? " on " date) " */";
