if_then_else =
    "if (" cond ") {" nl
    [stmt: indent stmt nl]
    (else? "} else " (cond? "if (" cond ") ") "{" nl
    [stmt: indent stmt nl])
    "}" nl;

local_var_defn = (init? name " := " init : "var " name " " type) nl;
global_var_defn = "var " name " " type " = " val nl;
array_defn = name " := []" type "{" init "}" nl;
type_int = "int";
type_uint = "uint";
type_yyctype = ctype;
type_yybm = "byte";

switch =
    "switch (" expr ") {" nl
    [case: case nl]
    "}" nl;

switch_case_single =
    "case " val ":" nl
    [stmt: indent stmt nl]
    "}" nl;

switch_case_range =
    "case " val{0} [val{1:-1}: "," val] ":" nl
    [stmt: indent stmt nl]
    "}" nl;

switch_default =
    "default:" nl
    [stmt: indent stmt nl]
    "}" nl;

loop =
    (label? label ":" nl)
    "for {" nl
    [stmt: indent stmt nl]
    "}" nl;

enum =
    "const (" nl
    indent elem{0} " = iota" nl
    [elem{1:-1}: indent elem (loop_switch? " = " val) nl]
    ")" nl;

codegen_model = goto_label;
codegen_model_goto_label = 1;
codegen_model_loop_switch = 1;
label_indent = zero;
semicolons = 0;
line_directives = "//line \"" file "\":" line nl;
numeric_literals_hex = (ebcdic ? 1 : 0);
implicit_zero_to_bool_conversion = 0;
abort_in_default_case = 1;
single_quote_in_labels = 0;
skeleton = 0;
computed_goto = 0;
case_ranges = 1;
uppercase_constants = 0;
loop_label = 1;

api = generic;
api_style = free-form;

fn_yypeek_expr = expr "()";
ff_yypeek_expr = expr;

abort_expr = "panic(\"internal lexer error\")";

autogen_comment =
    "// Code generated by re2c"
    (version? " " version)
    (date? " on " date)
    ", DO NOT EDIT.";
